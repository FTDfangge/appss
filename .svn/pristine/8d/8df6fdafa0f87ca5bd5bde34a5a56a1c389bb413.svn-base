package com.vetrack.vetrack;

import android.Manifest;
import android.content.Intent;
import android.content.pm.PackageManager;
import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.os.Environment;
import android.os.Handler;
import android.os.Looper;
import android.os.Message;
import android.support.v4.app.ActivityCompat;
import android.support.v4.content.ContextCompat;
import android.support.v7.app.AppCompatActivity;
import android.os.Bundle;
import android.util.Base64;
import android.util.Log;
import android.view.View;
import android.widget.Button;
import android.widget.ImageView;
import android.widget.Toast;

import com.vetrack.vetrack.Function.VetrackSystem;
import com.vetrack.vetrack.Service.Network;
import com.vetrack.vetrack.Utils.ImageData;

import org.tensorflow.Session;

import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.net.URL;
import java.net.URLConnection;

import okhttp3.OkHttpClient;
import okhttp3.Request;
import okhttp3.Response;
import okio.Utf8;

public class MainActivity extends AppCompatActivity implements View.OnClickListener {

    private static final int REQUEST_CODE = 1;
    private static final String TAG = "MainActivity";
    private static String[] PERMISSIONS = {
            Manifest.permission.READ_EXTERNAL_STORAGE,
            Manifest.permission.WRITE_EXTERNAL_STORAGE,
            Manifest.permission.ACCESS_FINE_LOCATION
    };

    private int privacyState = 0; //0->non-privacyMode, 1->privacyMode
    Button modeBtn;
    Button downloadBtn;
    Button driveOrParkBtn;
    ImageView map;
    private Bitmap bitmapFromServer;
    private Network network = null;
    private final static String ALBUM_PATH = Environment.getExternalStorageDirectory() + "/download_test/";
    private int fileLength;
    private static final String savePath = Environment.getExternalStorageDirectory().getPath() + "/DataCollect/data_image_imu/";

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);

        network = new Network();
        modeBtn = findViewById(R.id.modButton);
        downloadBtn = findViewById(R.id.downloadButton);
        driveOrParkBtn = findViewById(R.id.driveOrParkButton);
        map = findViewById(R.id.imageView3);
        modeBtn.setOnClickListener(this);
        downloadBtn.setOnClickListener(this);
        driveOrParkBtn.setOnClickListener(this);

        checkPermission();


    }



    @Override
    public void onClick(View v) {
        switch (v.getId()) {
            case R.id.modButton:
                if (privacyState == 0) {
                    privacyState = 1;
                    modeBtn.setText("PRIVATE");
                    Toast.makeText(this, "Changed to private mode", Toast.LENGTH_SHORT).show();
                } else {
                    privacyState = 0;
                    modeBtn.setText("PUBLIC");
                    Toast.makeText(this, "Changed to public mode", Toast.LENGTH_SHORT).show();
                    //upload data
                }
                break;
            case R.id.downloadButton:
                new Thread(new Runnable() {
                    @Override
                    public void run() {
//                    byte[] bytes = network.download("getMap");
//                    bitmapFromServer = BitmapFactory.decodeByteArray(bytes, 0, bytes.length);
//                    saveFile(bitmapFromServer,"bitmap");
//
                        String map = network.download("getMap");
                        byte[] img = map.getBytes();
                        bitmapFromServer = BitmapFactory.decodeByteArray(img, 0, img.length);
                        Log.d("mapSize", String.valueOf(bitmapFromServer == null));
//                    ImageData.SavaImage(bitmapFromServer,savePath,"vetrack");


                    }
                }).start();


                map.setImageBitmap(bitmapFromServer);
                break;
            case R.id.driveOrParkButton:
                //TO-DO

                break;
        }
    }

    public byte[] readStream(InputStream in) throws Exception {
        ByteArrayOutputStream bos = new ByteArrayOutputStream();
        byte data[] = new byte[1024];
        long total = 0;
        int count;
        while ((count = in.read(data)) != -1) {
            total += count;
            bos.write(data, 0, count);
        }
        bos.close();
        in.close();
        return bos.toByteArray();
    }


    private void checkPermission() {
        //检查权限（NEED_PERMISSION）是否被授权 PackageManager.PERMISSION_GRANTED表示同意授权
        if (ActivityCompat.checkSelfPermission(this, Manifest.permission.WRITE_EXTERNAL_STORAGE)
                != PackageManager.PERMISSION_GRANTED ||
                ContextCompat.checkSelfPermission(this,
                        android.Manifest.permission.ACCESS_FINE_LOCATION) != PackageManager.PERMISSION_GRANTED) {
            //申请权限
            ActivityCompat.requestPermissions(
                    this,
                    PERMISSIONS,
                    REQUEST_CODE
            );
        } else {
            //Toast.makeText(this, "授权成功！", Toast.LENGTH_SHORT).show();
            Log.i(TAG, "checkPermission: 已经授权！");
        }
        //用户已经拒绝过一次，再次弹出权限申请对话框需要给用户一个解释
        if (ActivityCompat.shouldShowRequestPermissionRationale(this, Manifest.permission
                .WRITE_EXTERNAL_STORAGE)) {
            Toast.makeText(this, "请开通相关权限，否则无法正常使用本应用！", Toast.LENGTH_SHORT).show();
        }
    }


}
