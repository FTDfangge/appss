package com.vetrack.vetrack;

import android.Manifest;
import android.annotation.SuppressLint;
import android.content.pm.PackageManager;
import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.os.AsyncTask;
import android.os.Bundle;
import android.os.Environment;
import android.os.Handler;
import android.os.Message;
import android.support.v4.app.ActivityCompat;
import android.support.v4.content.ContextCompat;
import android.support.v7.app.AppCompatActivity;
import android.util.Log;
import android.view.View;
import android.widget.Button;
import android.widget.ImageView;
import android.widget.Toast;

import com.vetrack.vetrack.Service.GPSService;
import com.vetrack.vetrack.Service.Network;
import com.vetrack.vetrack.Utils.FileOperation;

import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.InputStream;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.Locale;
import java.util.Map;

public class MainActivity extends AppCompatActivity implements View.OnClickListener {

    private static final int REQUEST_CODE = 1;
    private static final String TAG = "MainActivity";
    private static String[] PERMISSIONS = {
            Manifest.permission.READ_EXTERNAL_STORAGE,
            Manifest.permission.WRITE_EXTERNAL_STORAGE,
            Manifest.permission.ACCESS_FINE_LOCATION
    };

    private int privacyState = 0; //0->publicMode, 1->privacyMode
    Button modeBtn;
    Button downloadBtn;
    Button driveOrParkBtn;
    ImageView map;
    private Bitmap bitmapFromServer;
    private Network network = null;
    private final static String ALBUM_PATH = Environment.getExternalStorageDirectory() + "/download_test/";
    private int fileLength;
    private static final String savePath = Environment.getExternalStorageDirectory().getPath() + "/DataCollect/data_image_imu/";
    private int drivingState = 0; //0->drivingMode, 1->parkingMode

    //This part is for dataCollect
    private SensorService sensorService;
    private GPSService gpsService;

    //参数
//    private String longitude;
//    private String latitude;
//    private String speed;
//    private String bearing;
//    private String gpsTime;
//    private float[] angle = new float[3];
    private float[] acc = new float[3];
    private float[] mag = new float[3];
    private float[] gyr = new float[3];
    //    private float pre;
    private float[] gra = new float[3];
    private float[] l_acc = new float[3];
    private float ori;
    //采样间隔
    private static int COLLECT_INTERVAL = 20;
    //文件保存路径
    private static final String path = Environment.getExternalStorageDirectory().getPath() + "/DataCollect/data_gps/";
    private String filePath;
    //    private String videoName;
    private SimpleDateFormat df1 = new SimpleDateFormat("yyyy-MM-dd HH-mm-ss", Locale.getDefault());
    //private SimpleDateFormat df2 = new SimpleDateFormat("HH:mm:ss", Locale.getDefault());
    //private FileOperation fileOperation;
    //布局控件
    private final int READ_DATA = 1;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);

        network = new Network();
        modeBtn = findViewById(R.id.modButton);
        downloadBtn = findViewById(R.id.downloadButton);
        driveOrParkBtn = findViewById(R.id.driveOrParkButton);
        map = findViewById(R.id.imageView3);
        modeBtn.setOnClickListener(this);
        downloadBtn.setOnClickListener(this);
        driveOrParkBtn.setOnClickListener(this);

        checkPermission();


    }



    @Override
    public void onClick(View v) {
        switch (v.getId()) {
            case R.id.modButton:
                if (privacyState == 0) {
                    privacyState = 1;
                    modeBtn.setText("PRIVATE");
                    Toast.makeText(this, "Changed to private mode", Toast.LENGTH_SHORT).show();
                } else {
                    privacyState = 0;
                    modeBtn.setText("PUBLIC");
                    Toast.makeText(this, "Changed to public mode", Toast.LENGTH_SHORT).show();
                    //upload data
                }
                break;
            case R.id.downloadButton:
                new Thread(new Runnable() {
                    @Override
                    public void run() {
//                    byte[] bytes = network.download("getMap");
//                    bitmapFromServer = BitmapFactory.decodeByteArray(bytes, 0, bytes.length);
//                    saveFile(bitmapFromServer,"bitmap");
//
                        String map = network.download("getMap");
                        byte[] img = map.getBytes();
                        bitmapFromServer = BitmapFactory.decodeByteArray(img, 0, img.length);
                        Log.d("mapSize", String.valueOf(bitmapFromServer == null));
//                    ImageData.SavaImage(bitmapFromServer,savePath,"vetrack");


                    }
                }).start();


                map.setImageBitmap(bitmapFromServer);
                break;
            case R.id.driveOrParkButton:

                if (drivingState == 0) { //press park after driving
                    driveOrParkBtn.setText("drive");
                    //Once pressed park, send data to the server
                    if (privacyState == 0) {
                        new Thread(new Runnable() {
                            @Override
                            public void run() {
                                File dataFile = recordData();
                                String fileName = df1.format(new Date()) + ".csv";
                                try {
                                    network.upload(fileName, dataFile);
                                } catch (Exception e) {
                                    e.printStackTrace();
                                }
                            }
                        }).start();
                    } else {

                    }
                } else { // press drive after parking
                    driveOrParkBtn.setText("park");
                    // TODO: 3/24/2021  draw a point of car

                }


                break;
        }
    }

    public byte[] readStream(InputStream in) throws Exception {
        ByteArrayOutputStream bos = new ByteArrayOutputStream();
        byte data[] = new byte[1024];
        long total = 0;
        int count;
        while ((count = in.read(data)) != -1) {
            total += count;
            bos.write(data, 0, count);
        }
        bos.close();
        in.close();
        return bos.toByteArray();
    }

    private File recordData() {
        String fileName = df1.format(new Date()) + ".csv";
        File file = FileOperation.makeFilePath(path, fileName);
        filePath = file.getAbsolutePath();
        String dataFormat = "Sys_time,laccx,y,z,grax,y,z,gyrx,y,z,accx,y,z,magx,y,z,ori," +
                "lon,lat,speed,bearing,gps_time";
        String[] content = {dataFormat, filePath};

        WriteWork writeWork = new WriteWork();
        writeWork.execute(content);
        String show = filePath + "\n" + dataFormat;
        final Boolean recordStart = true;
        Toast.makeText(MainActivity.this, "记录开始", Toast.LENGTH_LONG).show();
        //建立一个线程，用来定时记录数据
        new Thread(new Runnable() {
            @Override
            public void run() {
                sensorService.registerSensor();
                int count = 0;
                while (recordStart) {
                    try {
                        Thread.sleep(COLLECT_INTERVAL - 1);
                        Map<String, float[]> sensorValue = sensorService.getValue();
                        l_acc = (float[]) sensorValue.get("lacc");
                        gra = (float[]) sensorValue.get("gra");
                        gyr = (float[]) sensorValue.get("gyr");
                        acc = (float[]) sensorValue.get("acc");
                        mag = (float[]) sensorValue.get("mag");
                        float[] ori_temp = (float[]) sensorValue.get("ori");
                        if (ori_temp != null) {
                            ori = ori_temp[0];
                        }
                        String dataString = System.currentTimeMillis() + ","
                                + l_acc[0] + "," + l_acc[1] + "," + l_acc[2] + ","
                                + gra[0] + "," + gra[1] + "," + gra[2] + ","
                                + gyr[0] + "," + gyr[1] + "," + gyr[2] + ","
                                + acc[0] + "," + acc[1] + "," + acc[2] + ","
                                + mag[0] + "," + mag[1] + "," + mag[2] + ","
                                + ori + ","
                                + gpsService.getDataString();
//                                String data = sensorService.getDataString() + gpsService.getDataString();
                        String[] content = {dataString, filePath};
                        WriteWork writeWork = new WriteWork();
                        writeWork.execute(content);
                    } catch (InterruptedException e) {
                        e.printStackTrace();
                    }
                    if (++count == 25) {
                        Message message = new Message();
                        message.what = READ_DATA;
                        handler.sendMessage(message);
                        count = 0;
                    }
                }
            }
        }).start();

        return null;
    }

    private void checkPermission() {
        //检查权限（NEED_PERMISSION）是否被授权 PackageManager.PERMISSION_GRANTED表示同意授权
        if (ActivityCompat.checkSelfPermission(this, Manifest.permission.WRITE_EXTERNAL_STORAGE)
                != PackageManager.PERMISSION_GRANTED ||
                ContextCompat.checkSelfPermission(this,
                        android.Manifest.permission.ACCESS_FINE_LOCATION) != PackageManager.PERMISSION_GRANTED) {
            //申请权限
            ActivityCompat.requestPermissions(
                    this,
                    PERMISSIONS,
                    REQUEST_CODE
            );
        } else {
            //Toast.makeText(this, "授权成功！", Toast.LENGTH_SHORT).show();
            Log.i(TAG, "checkPermission: 已经授权！");
        }
        //用户已经拒绝过一次，再次弹出权限申请对话框需要给用户一个解释
        if (ActivityCompat.shouldShowRequestPermissionRationale(this, Manifest.permission
                .WRITE_EXTERNAL_STORAGE)) {
            Toast.makeText(this, "请开通相关权限，否则无法正常使用本应用！", Toast.LENGTH_SHORT).show();
        }
    }

    private static class WriteWork extends AsyncTask<String, Void, Void> {
        @Override
        protected Void doInBackground(String... strings) {
            FileOperation fileOperation = new FileOperation();
            fileOperation.writeCsv(strings[0], strings[1]);
            return null;
        }
    }

    @SuppressLint("HandlerLeak")
    private Handler handler = new Handler() {
        @Override
        public void handleMessage(Message msg) {
            switch (msg.what) {
                case READ_DATA:
                    ArrayList<String> tData = new ArrayList<>();
                    String time = String.valueOf(System.currentTimeMillis());
                    tData.add("time:" + time);
                    tData.add("\n" + "locate:" + gpsService.getDataString());
                    tData.add("\n" + "acc:" + acc[0] + "," + acc[1] + "," + acc[2]);
                    tData.add("\n" + "mag:" + mag[0] + "," + mag[1] + "," + mag[2]);
                    tData.add("\n" + "gyr:" + gyr[0] + "," + gyr[1] + "," + gyr[2]);
                    tData.add("\n" + "gra:" + gra[0] + "," + gra[1] + "," + gra[2]);
                    tData.add("\n" + "l_acc:" + l_acc[0] + "," + l_acc[1] + "," + l_acc[2]);
//                    tData.add("press:" + pre);
                    tData.add("\n" + "orientation:" + ori);

            }
        }
    };

}
