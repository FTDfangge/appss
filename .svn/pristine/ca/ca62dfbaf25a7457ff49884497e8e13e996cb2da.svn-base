package com.vetrack.vetrack;

import android.annotation.SuppressLint;
import android.content.Context;
import android.content.pm.ActivityInfo;
import android.graphics.Bitmap;
import android.hardware.Sensor;
import android.hardware.SensorEvent;
import android.hardware.SensorEventListener;
import android.hardware.SensorManager;
import android.os.Bundle;
import android.os.Environment;
import android.os.Handler;
import android.os.Message;
import android.support.v7.app.AppCompatActivity;
import android.util.Log;
import android.view.View;
import android.view.WindowManager;
import android.widget.Button;
import android.widget.EditText;
import android.widget.ImageView;
import android.widget.Toast;

import com.vetrack.vetrack.Function.DrawPoint;
import com.vetrack.vetrack.Function.VetrackSystem;
import com.vetrack.vetrack.Model.TraceInfo;
import com.vetrack.vetrack.Utils.Setting;

import java.io.IOException;

/**
 * Prediction and Roll Back Mode
 * In this mode, the system will try to predict whether the vehicle is going through landmarks,
 * so that it will be more real-time.
 * Additionally, optional strategy of rolling back can be add into back-end.
 */
public class RollbackActivity extends AppCompatActivity {

    private static final String TAG = "RollbackActivity";
    private static final int STRAT_TRACK = 0x00010001;
    private static final int DRAW_POINT = 0x00010002;
    private static final int ERROR = 0x00010000;
    private String path = Environment.getExternalStorageDirectory().getPath() + "/vetrack";

    private ImageView imageView;
    private EditText et_x;
    private EditText et_y;
    private EditText et_direction;
    private EditText et_floor;
    private Button btn_start;
    private DrawPoint drawPoint;
    private Bitmap resultBm;

    private boolean run;

    private VetrackSystem vetrackSystem;
    TraceInfo traceInfo;

    private SensorManager mSensorManager;
    private Sensor mAccelerometer;
    private Sensor mMagnetic;
    private Sensor mGyroscope;
    private Sensor mGravity;
    private Sensor mLinear_accelerometer;
    private SensorListener mSensorListener;
    private static int COLLECT_INTERVAL = Setting.COLLECT_INTERVAL;//采样间隔
    private long timestamp;
    private static final float NS2S = 1.0f / 1000000000.0f;
    private float[] angle = new float[3];
    private float[] acc = new float[3];
    private float[] mag = new float[3];
    private float[] gyr = new float[3];
    private float[] gra = new float[3];
    private float[] l_acc = new float[3];
    private float ori;
    private String sound; // for sound recongnition

//    int parking, pose, trace;//test

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_rollback);

        //start a new thread of sound recognition
        sound = "result";

        setWindow();

        imageView = findViewById(R.id.imaV_map_r);
        et_x = findViewById(R.id.et_x);
        et_y = findViewById(R.id.et_y);
        et_direction = findViewById(R.id.et_direction);
        et_floor = findViewById(R.id.et_floor);
        btn_start = findViewById(R.id.btn_start);
        Button btn_showPoints = findViewById(R.id.btn_showPoints);

        // 初始化传感器
        mSensorListener = new SensorListener();
        mSensorManager = (SensorManager) getSystemService(Context.SENSOR_SERVICE);
        if (mSensorManager != null) {
            mAccelerometer = mSensorManager.getDefaultSensor(Sensor.TYPE_ACCELEROMETER);
            mMagnetic = mSensorManager.getDefaultSensor(Sensor.TYPE_MAGNETIC_FIELD);
            mGyroscope = mSensorManager.getDefaultSensor(Sensor.TYPE_GYROSCOPE);
            mGravity = mSensorManager.getDefaultSensor(Sensor.TYPE_GRAVITY);
            mLinear_accelerometer = mSensorManager.getDefaultSensor(Sensor.TYPE_LINEAR_ACCELERATION);
        }
        // 初始化画布
        drawPoint = new DrawPoint(RollbackActivity.this, Setting.n_ps);
        btn_showPoints.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                if (drawPoint.isShowAllPoints())
                    drawPoint.setShowAllPoints(false);
                else
                    drawPoint.setShowAllPoints(true);
            }
        });
        btn_start.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                traceInfo = new TraceInfo();
                if (!run) {
//                    String tracePath = path + "/trace";//test
                    try {
                        run = true;
//                        parking = Integer.parseInt(et_x.getText().toString());//test
//                        pose = Integer.parseInt(et_y.getText().toString());//test
//                        trace = Integer.parseInt(et_direction.getText().toString());//test
                        traceInfo.setInit_x(Integer.parseInt(et_x.getText().toString()));
                        traceInfo.setInit_y(Integer.parseInt(et_y.getText().toString()));
                        traceInfo.setInit_theta(Integer.parseInt(et_direction.getText().toString()));
                        traceInfo.setInit_sn(Integer.parseInt(et_floor.getText().toString()));
                    } catch (Exception e) {
                        Toast.makeText(RollbackActivity.this, "Input Error!", Toast.LENGTH_SHORT).show();
                        traceInfo.setInit_x(70);
                        traceInfo.setInit_y(48);
                        traceInfo.setInit_theta(0);
                        traceInfo.setInit_sn(1);
//                        parking = 4;
//                        pose = 1;
//                        trace = 3;
                    }
//                    traceInfo = new TraceInfo(tracePath, parking, pose, trace);//test
                    Toast.makeText(RollbackActivity.this,
                            "Initializing!",
                            Toast.LENGTH_SHORT).show();
                    new Thread(new Runnable() {
                        @Override
                        public void run() {
                            try {
                                vetrackSystem = new VetrackSystem();
                                vetrackSystem.initialMap(path);
                                vetrackSystem.initialTrack(traceInfo);
                                myHandler.sendEmptyMessage(STRAT_TRACK);
                            } catch (IOException | ClassNotFoundException e) {
                                e.printStackTrace();
                                myHandler.sendEmptyMessage(ERROR);
                            }
                        }
                    }).start();

                } else {
                    run = false;
                    vetrackSystem.stop();
                    btn_start.setText("Start");
                }
            }
        });
    }

    @SuppressLint("HandlerLeak")
    Handler myHandler = new Handler() {
        public void handleMessage(Message msg) {
            switch (msg.what) {
                case STRAT_TRACK:
                    btn_start.setText("Stop");
                    Toast.makeText(RollbackActivity.this,
                            "Start Tracking!",
                            Toast.LENGTH_SHORT).show();
                    new Thread(new Runnable() {
                        @Override
                        public void run() {
                            double[][] robots;
                            int countData = 0;
//                            String tracePath = path + "/trace";//test
//                            Matrix dataAll = Utils.readMatrix(tracePath + "/" + parking + pose + trace + ".csv");//test
//                            int dataPtr = 0;//test
                            while (run) { //&& dataPtr < dataAll.getRowDimension()
                                try {
                                    Thread.sleep(COLLECT_INTERVAL);
                                } catch (InterruptedException e) {
                                    e.printStackTrace();
                                }
                                try {
                                    double[] data = {System.currentTimeMillis(),//real time
                                            l_acc[0], l_acc[1], l_acc[2], ori,
                                            gra[0], gra[1], gra[2],
                                            gyr[0], gyr[1], gyr[2],
                                            mag[0], mag[1], mag[2]};

                                    robots = vetrackSystem.processData(data, sound);
//                                robots = vetrackSystem.processData(dataAll.getArray()[dataPtr++]);//test
                                    if (countData % 20 == 0) {
                                        resultBm = drawPoint.setPoints(robots[0], robots[1], robots[6]);
                                        myHandler.sendEmptyMessage(DRAW_POINT);
                                    }
                                    countData++;
                                } catch (Exception e) {
                                    myHandler.sendEmptyMessage(ERROR);
                                }
                            }
                            run = false;
                            vetrackSystem.stop();
                            runOnUiThread(new Runnable() {
                                @Override
                                public void run() {
                                    btn_start.setText("Start");
                                    Toast.makeText(RollbackActivity.this,
                                            "Finish!",
                                            Toast.LENGTH_SHORT).show();
                                }
                            });
                        }
                    }).start();
                    break;
                case DRAW_POINT:
                    imageView.setImageBitmap(resultBm);
                    break;
                case ERROR:
                    run = false;
                    Toast.makeText(RollbackActivity.this,
                            "Something goes wrong and system terminate!",
                            Toast.LENGTH_LONG).show();
            }
        }
    };


    @Override
    protected void onResume() {
        super.onResume();
        // 注册传感器监听函数
        mSensorManager.registerListener(mSensorListener, mAccelerometer, SensorManager.SENSOR_DELAY_UI);
        mSensorManager.registerListener(mSensorListener, mMagnetic, SensorManager.SENSOR_DELAY_UI);
        mSensorManager.registerListener(mSensorListener, mGyroscope, SensorManager.SENSOR_DELAY_UI);
        mSensorManager.registerListener(mSensorListener, mGravity, SensorManager.SENSOR_DELAY_UI);
        mSensorManager.registerListener(mSensorListener, mLinear_accelerometer, SensorManager.SENSOR_DELAY_UI);
    }

    @Override
    protected void onPause() {
        super.onPause();
        // 注销监听函数
        mSensorManager.unregisterListener(mSensorListener);
    }

    private class SensorListener implements SensorEventListener {

        @Override
        public void onSensorChanged(SensorEvent event) {
            switch (event.sensor.getType()) {
                case Sensor.TYPE_MAGNETIC_FIELD:
                    mag[0] = event.values[0];
                    mag[1] = event.values[1];
                    mag[2] = event.values[2];
                    break;
                case Sensor.TYPE_GYROSCOPE:
                    if (timestamp != 0) {
                        final float dT = (event.timestamp - timestamp) * NS2S;

                        angle[0] += event.values[0] * dT;
                        angle[1] += event.values[1] * dT;
                        angle[2] += event.values[2] * dT;

                        gyr[0] = (float) Math.toDegrees(angle[0]);
                        gyr[1] = (float) Math.toDegrees(angle[1]);
                        gyr[2] = (float) Math.toDegrees(angle[2]);
                    }
                    timestamp = event.timestamp;
                    break;
                case Sensor.TYPE_GRAVITY:
                    gra[0] = event.values[0];
                    gra[1] = event.values[1];
                    gra[2] = event.values[2];
                    break;
                case Sensor.TYPE_LINEAR_ACCELERATION:
                    l_acc[0] = event.values[0];
                    l_acc[1] = event.values[1];
                    l_acc[2] = event.values[2];
                    break;
                case Sensor.TYPE_ACCELEROMETER:
                    // 读取加速度传感器数值，values数组0,1,2分别对应x,y,z轴的加速度
                    acc[0] = event.values[0];
                    acc[1] = event.values[1];
                    acc[2] = event.values[2];
                    break;
            }
            ori = calculateOrientation();
        }

        @Override
        public void onAccuracyChanged(Sensor sensor, int accuracy) {
            Log.i(TAG, "onAccuracyChanged");
        }
    }

    private float calculateOrientation() {
        float[] values = new float[3];
        float[] R = new float[16];
        SensorManager.getRotationMatrix(R, null, acc, mag);
        SensorManager.getOrientation(R, values);
        // 要经过一次数据格式的转换，转换为度
        values[0] = (float) Math.toDegrees(values[0]);
        if (values[0] < 0)
            values[0] += 360;
        return values[0];
    }

    private void setWindow() {
        //保持屏幕常亮
        getWindow().addFlags(WindowManager.LayoutParams.FLAG_KEEP_SCREEN_ON);
        //横屏
        setRequestedOrientation(ActivityInfo.SCREEN_ORIENTATION_LANDSCAPE);
    }
}
