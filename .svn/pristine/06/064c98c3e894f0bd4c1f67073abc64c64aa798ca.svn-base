package com.vetrack.vetrack;

import android.Manifest;
import android.annotation.SuppressLint;
import android.app.Service;
import android.content.Context;
import android.content.Intent;
import android.content.pm.PackageManager;
import android.content.res.AssetManager;
import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.os.AsyncTask;
import android.os.Bundle;
import android.os.Environment;
import android.os.Handler;
import android.os.Message;
import android.os.Vibrator;
import android.support.v4.app.ActivityCompat;
import android.support.v4.content.ContextCompat;
import android.support.v7.app.AppCompatActivity;
import android.util.Base64;
import android.util.Log;
import android.view.View;
import android.widget.Button;
import android.widget.EditText;
import android.widget.ImageView;
import android.widget.Toast;

import com.ai.aiboost.AiBoostInterpreter;
import com.baidu.mapapi.CoordType;
import com.baidu.mapapi.SDKInitializer;
import com.vetrack.vetrack.Function.DrawPoint;
import com.vetrack.vetrack.Function.VetrackSystem;
import com.vetrack.vetrack.Model.TraceInfo;
import com.vetrack.vetrack.Service.GPSService;
import com.vetrack.vetrack.Service.LocationService;
import com.vetrack.vetrack.Service.Network;
import com.vetrack.vetrack.Utils.FileOperation;
import com.vetrack.vetrack.Utils.Setting;

import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;
import java.nio.FloatBuffer;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.Locale;
import java.util.Map;
import java.util.Random;

import static com.vetrack.vetrack.RollbackActivity.asByteBuffer;


public class MainActivity extends AppCompatActivity implements View.OnClickListener {

    private static final int REQUEST_CODE = 1;
    private static final String TAG = "MainActivity";
    private static String[] PERMISSIONS = {
            Manifest.permission.READ_EXTERNAL_STORAGE,
            Manifest.permission.WRITE_EXTERNAL_STORAGE,
            Manifest.permission.ACCESS_FINE_LOCATION
    };
    private static final int STRAT_TRACK = 0x00010001;
    private static final int DRAW_POINT = 0x00010002;
    private static final int ERROR = 0x00010000;


    Button modeBtn;
    Button downloadBtn;
    Button driveOrParkBtn;
    private Bitmap resultBm;
    ImageView map;
    private Bitmap bitmapFromServer;
    private VetrackSystem vetrackSystem;
    private Network network = null;
    private final static String ALBUM_PATH = Environment.getExternalStorageDirectory() + "/download_test/";
    private int fileLength;
    private static final String savePath = Environment.getExternalStorageDirectory().getPath() + "/DataCollect/data_image_imu/";
    private int drivingState = 0; //0->drivingMode, 1->parkingMode
    private String longDataString;
    private boolean run;

    //This part is for dataCollect
    private SensorService sensorService;
//    private GPSService gpsService;

    //参数
//    private String longitude;
//    private String latitude;
//    private String speed;
//    private String bearing;
//    private String gpsTime;
//    private float[] angle = new float[3];
    private float[] acc = new float[3];
    private float[] mag = new float[3];
    private float[] gyr = new float[3];
    //    private float pre;
    private float[] gra = new float[3];
    private float[] l_acc = new float[3];
    private float ori;
    //采样间隔
    private static int COLLECT_INTERVAL = 20;
    //文件保存路径
    private static final String path = Environment.getExternalStorageDirectory().getPath() + "/DataCollect/data_gps/";
    private String filePath;
    //    private String videoName;
    private SimpleDateFormat df1 = new SimpleDateFormat("yyyy-MM-dd HH-mm-ss", Locale.getDefault());
    //private SimpleDateFormat df2 = new SimpleDateFormat("HH:mm:ss", Locale.getDefault());
    //private FileOperation fileOperation;
    //布局控件
    private final int READ_DATA = 1;
    private final int REFRESH_MAP = 2;
    public LocationService locationService;
    public Vibrator mVibrator;
    TraceInfo traceInfo;
    private EditText et_x;
    private EditText et_y;
    private EditText et_direction;
    private EditText et_floor;

    //AIBoost
    public AiBoostInterpreter.Options options = null;
    public AiBoostInterpreter aiboost = null;
    public ByteBuffer tensorData = null;

    private DrawPoint drawPoint;


    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);

        //Cover page init, and it will automatically turn to authority page.
        Intent intent = new Intent(MainActivity.this, CoverActivity.class);
        startActivity(intent);

        locationService = new LocationService(getApplicationContext());
        mVibrator = (Vibrator) getApplicationContext().getSystemService(Service.VIBRATOR_SERVICE);
        SDKInitializer.initialize(getApplicationContext());
        SDKInitializer.setCoordType(CoordType.BD09LL);


        //AIBoost模型初始化
        try {
            Context context = this.getApplicationContext();
            AssetManager assetManager = context.getAssets();
            InputStream input = null;
            input = assetManager.open("model.tflite");
            int length = input.available();
            byte[] buffer = new byte[length];
            input.read(buffer);
            ByteBuffer modelbuf = ByteBuffer.allocateDirect(length);
            modelbuf.order(ByteOrder.nativeOrder());
            modelbuf.put(buffer);

            options = new AiBoostInterpreter.Options();                                 //创建和配置AiBoostInterpreter.Options参数
            options.setNumThreads(1);   //线程数
            options.setDeviceType(AiBoostInterpreter.Device.QUALCOMM_DSP);              //运行设备类型定义
            options.setQComPowerLevel(AiBoostInterpreter.QCOMPowerLEVEL.QCOM_TURBO);    //高通DSP/NPU性能等级，运行速度递减，功耗递减
            options.setNativeLibPath(context.getApplicationInfo().nativeLibraryDir);    //本地lib path
            int[][] input_shapes = new int[][]{{1, 500, 9, 1}};

            aiboost = new AiBoostInterpreter(modelbuf, input_shapes, options);  //模型，input_shapes，option设备参数

            tensorData = aiboost.getInputTensor(0);
        } catch (IOException e) {
            e.printStackTrace();
        }


        network = Network.getInstance();
        modeBtn = findViewById(R.id.modButton);
        driveOrParkBtn = findViewById(R.id.driveOrParkButton);
        map = findViewById(R.id.imageView3);
        modeBtn.setOnClickListener(this);
        driveOrParkBtn.setOnClickListener(this);
        sensorService = new SensorService(MainActivity.this);

        checkPermission();

        new Thread(new Runnable() {
            @Override
            public void run() {
//                    byte[] bytes = network.download("getMap");
//                    bitmapFromServer = BitmapFactory.decodeByteArray(bytes, 0, bytes.length);
//                    saveFile(bitmapFromServer,"bitmap");
                try {
                    String map = network.download("getMap");

//                        byte[] img = map.getBytes();
//                        bitmapFromServer = BitmapFactory.decodeByteArray(img, 0, img.length);


                    byte[] bitmapByte = Base64.decode(map, Base64.DEFAULT);
                    bitmapFromServer = BitmapFactory.decodeByteArray(bitmapByte, 0, bitmapByte.length);
                    Log.d("mapSize", String.valueOf(bitmapFromServer == null));
//                    ImageData.SavaImage(bitmapFromServer,savePath,"vetrack");
                    if (bitmapFromServer != null) {
                        Message message = new Message();
                        message.what = REFRESH_MAP;
                        handler.sendMessage(message);
                    }

                } catch (NullPointerException e) {
                    // no network
                }


            }
        }).start();


        // 初始化画布
        drawPoint = new DrawPoint(MainActivity.this, Setting.n_ps);

        new Thread(new Runnable() {
            @Override
            public void run() {
                traceInfo = new TraceInfo();
                if (!run) {
//                    String tracePath = path + "/trace";//test
                    try {
                        run = true;
//                        parking = Integer.parseInt(et_x.getText().toString());//test
//                        pose = Integer.parseInt(et_y.getText().toString());//test
//                        trace = Integer.parseInt(et_direction.getText().toString());//test
                        traceInfo.setInit_x(Integer.parseInt(et_x.getText().toString()));
                        traceInfo.setInit_y(Integer.parseInt(et_y.getText().toString()));
                        traceInfo.setInit_theta(Integer.parseInt(et_direction.getText().toString()));
                        traceInfo.setInit_sn(Integer.parseInt(et_floor.getText().toString()));
                    } catch (Exception e) {
//                        Toast.makeText(MainActivity.this, "Input Error!", Toast.LENGTH_SHORT).show();
                        traceInfo.setInit_x(70);
                        traceInfo.setInit_y(48);
                        traceInfo.setInit_theta(0);
                        traceInfo.setInit_sn(1);
//                        parking = 4;
//                        pose = 1;
//                        trace = 3;
                    }
//                    traceInfo = new TraceInfo(tracePath, parking, pose, trace);//test
//                    Toast.makeText(MainActivity.this,
//                            "Initializing!",
//                            Toast.LENGTH_SHORT).show();
                    new Thread(new Runnable() {
                        @Override
                        public void run() {
                            try {
                                vetrackSystem = new VetrackSystem();
                                vetrackSystem.initialMap(path);
                                vetrackSystem.initialTrack(traceInfo);
                                myHandler.sendEmptyMessage(STRAT_TRACK);
                            } catch (IOException | ClassNotFoundException e) {
                                e.printStackTrace();
                                myHandler.sendEmptyMessage(ERROR);
                            }
                        }
                    }).start();

                } else {
                    run = false;
                    vetrackSystem.stop();
                }
            }
        }).start();


        Toast.makeText(MainActivity.this,
                "Start Tracking!",
                Toast.LENGTH_SHORT).show();
        new Thread(new Runnable() {
            @Override
            public void run() {
                double[][] robots;
                int countData = 0;
//                            String tracePath = path + "/trace";//test
//                            Matrix dataAll = Utils.readMatrix(tracePath + "/" + parking + pose + trace + ".csv");//test
//                            int dataPtr = 0;//test
                while (run) { //&& dataPtr < dataAll.getRowDimension()

                    float[][] modelData = new float[9][500];
                    int modelCount = 0;

                    try {
                        Thread.sleep(COLLECT_INTERVAL);
                    } catch (InterruptedException e) {
                        e.printStackTrace();
                    }
                    try {
//                                    double[] data = {System.currentTimeMillis(),//real time
//                                            l_acc[0], l_acc[1], l_acc[2], ori,
//                                            gra[0], gra[1], gra[2],
//                                            gyr[0], gyr[1], gyr[2],
//                                            mag[0], mag[1], mag[2]};
//
//                                    robots = vetrackSystem.processData(data, sound);

                        modelData[modelCount++] = new float[]{gra[0], gra[1], gra[2], gyr[0], gyr[1], gyr[2], l_acc[0], l_acc[1], l_acc[2]};
                        if (modelCount % 4500 == 0) {
                            modelCount = 0;
                            float[] tansData = new float[4500];
                            for (int i = 0; i < 4500; i++) {
                                tansData[i] = modelData[i % 9][i / 9];
                            }
                            tensorData.put(asByteBuffer(FloatBuffer.wrap(tansData)).array());
                        }

                        //测试用例
                        float[] sampleData = new float[4500];
                        Random r = new Random(1);
                        for (int i = 0; i < sampleData.length; i++) {
                            sampleData[i] = r.nextFloat() / 1000;
                        }
//                        tensorData.put(asByteBuffer(FloatBuffer.wrap(sampleData)).array());
//                                robots = vetrackSystem.processData(dataAll.getArray()[dataPtr++]);//test
//                                    if (countData % 20 == 0) {
//                                        resultBm = drawPoint.setPoints(robots[0], robots[1], robots[6]);
//                                        myHandler.sendEmptyMessage(DRAW_POINT);
//                                    }
//                                    countData++;
                    } catch (Exception e) {
                        myHandler.sendEmptyMessage(ERROR);
                    }
                }

                ByteBuffer output = aiboost.getOutputTensor(0); //输出
                byte[] result = new byte[output.remaining()];
                aiboost.runWithOutInputOutput();
                output.get(result, 0, result.length);
                FloatBuffer buffer = ByteBuffer.wrap(result).asFloatBuffer();
                float[] res = new float[buffer.remaining()];
                buffer.get(res);    //得到0速度变化量，1角速度变化量


                run = false;
                vetrackSystem.stop();
                runOnUiThread(new Runnable() {
                    @Override
                    public void run() {
                        Toast.makeText(MainActivity.this,
                                "Finish!",
                                Toast.LENGTH_SHORT).show();
                    }
                });
            }
        }).start();

    }



    @Override
    public void onClick(View v) {
        switch (v.getId()) {
            case R.id.modButton:
                if (network.getPrivacyState() == 0) {
                    network.setPrivacyState(1);
                    modeBtn.setText("PRIVATE");
                    Toast.makeText(this, "Changed to private mode", Toast.LENGTH_SHORT).show();
                } else {
                    network.setPrivacyState(0);
                    modeBtn.setText("PUBLIC");
                    Toast.makeText(this, "Changed to public mode", Toast.LENGTH_SHORT).show();
                    //upload data
                }
                break;


            case R.id.driveOrParkButton:

                if (drivingState == 0) { //press park after driving
                    driveOrParkBtn.setText("drive");
                    //Once pressed park, send data to the server
                    if (network.getPrivacyState() == 0) {
                        new Thread(new Runnable() {
                            @Override
                            public void run() {
                                File dataFile = recordData();
                                String fileName = df1.format(new Date()) + ".csv";
                                try {
                                    network.upload(fileName, longDataString);
                                    Toast.makeText(MainActivity.this, "file Uploaded", Toast.LENGTH_LONG).show();
                                } catch (Exception e) {
                                    e.printStackTrace();
                                }
                            }
                        }).start();
                    } else {

                    }
                } else { // press drive after parking
                    driveOrParkBtn.setText("park");
                    // TODO: 3/24/2021  draw a point of car

                }


                break;
        }
    }

    public byte[] readStream(InputStream in) throws Exception {
        ByteArrayOutputStream bos = new ByteArrayOutputStream();
        byte data[] = new byte[1024];
        long total = 0;
        int count;
        while ((count = in.read(data)) != -1) {
            total += count;
            bos.write(data, 0, count);
        }
        bos.close();
        in.close();
        return bos.toByteArray();
    }

    private File recordData() {
        String fileName = df1.format(new Date()) + ".csv";
        File file = FileOperation.makeFilePath(path, fileName);
        filePath = file.getAbsolutePath();
        String dataFormat = "Sys_time,laccx,y,z,grax,y,z,gyrx,y,z,accx,y,z,magx,y,z,ori," +
                "lon,lat,speed,bearing,gps_time";
        String[] content = {dataFormat, filePath};

        WriteWork writeWork = new WriteWork();
        writeWork.execute(content);
        String show = filePath + "\n" + dataFormat;
        final Boolean recordStart = true;
//        Toast.makeText(MainActivity.this, "记录开始", Toast.LENGTH_LONG).show();
        //建立一个线程，用来定时记录数据
        new Thread(new Runnable() {
            @Override
            public void run() {
                sensorService.registerSensor();
                int count = 0;
                while (recordStart) {
                    try {
                        Thread.sleep(COLLECT_INTERVAL - 1);
                        Map<String, float[]> sensorValue = sensorService.getValue();
                        l_acc = (float[]) sensorValue.get("lacc");
                        gra = (float[]) sensorValue.get("gra");
                        gyr = (float[]) sensorValue.get("gyr");
                        acc = (float[]) sensorValue.get("acc");
                        mag = (float[]) sensorValue.get("mag");
                        float[] ori_temp = (float[]) sensorValue.get("ori");
                        if (ori_temp != null) {
                            ori = ori_temp[0];
                        }
                        String dataString = System.currentTimeMillis() + ","
                                + l_acc[0] + "," + l_acc[1] + "," + l_acc[2] + ","
                                + gra[0] + "," + gra[1] + "," + gra[2] + ","
                                + gyr[0] + "," + gyr[1] + "," + gyr[2] + ","
                                + acc[0] + "," + acc[1] + "," + acc[2] + ","
                                + mag[0] + "," + mag[1] + "," + mag[2] + ","
                                + ori + ",";
//                                + gpsService.getDataString();
//                                String data = sensorService.getDataString() + gpsService.getDataString();
                        longDataString += dataString;
                        String[] content = {dataString, filePath};
                        WriteWork writeWork = new WriteWork();
                        writeWork.execute(content);
                    } catch (InterruptedException e) {
                        e.printStackTrace();
                    }
                    if (++count == 25) {
                        Message message = new Message();
                        message.what = READ_DATA;
                        handler.sendMessage(message);
                        count = 0;
                    }
                }
            }
        }).start();

        return file;
    }

    private void checkPermission() {
        //检查权限（NEED_PERMISSION）是否被授权 PackageManager.PERMISSION_GRANTED表示同意授权
        if (ActivityCompat.checkSelfPermission(this, Manifest.permission.WRITE_EXTERNAL_STORAGE)
                != PackageManager.PERMISSION_GRANTED ||
                ContextCompat.checkSelfPermission(this,
                        android.Manifest.permission.ACCESS_FINE_LOCATION) != PackageManager.PERMISSION_GRANTED) {
            //申请权限
            ActivityCompat.requestPermissions(
                    this,
                    PERMISSIONS,
                    REQUEST_CODE
            );
        } else {
            //Toast.makeText(this, "授权成功！", Toast.LENGTH_SHORT).show();
            Log.i(TAG, "checkPermission: 已经授权！");
        }
        //用户已经拒绝过一次，再次弹出权限申请对话框需要给用户一个解释
        if (ActivityCompat.shouldShowRequestPermissionRationale(this, Manifest.permission
                .WRITE_EXTERNAL_STORAGE)) {
            Toast.makeText(this, "请开通相关权限，否则无法正常使用本应用！", Toast.LENGTH_SHORT).show();
        }
    }

    private static class WriteWork extends AsyncTask<String, Void, Void> {
        @Override
        protected Void doInBackground(String... strings) {
            FileOperation fileOperation = new FileOperation();
            fileOperation.writeCsv(strings[0], strings[1]);
            return null;
        }
    }

    @SuppressLint("HandlerLeak")
    private Handler handler = new Handler() {
        @Override
        public void handleMessage(Message msg) {
            switch (msg.what) {
                case READ_DATA:
                    ArrayList<String> tData = new ArrayList<>();
                    String time = String.valueOf(System.currentTimeMillis());
                    tData.add("time:" + time);
//                    tData.add("\n" + "locate:" + gpsService.getDataString());
                    tData.add("\n" + "acc:" + acc[0] + "," + acc[1] + "," + acc[2]);
                    tData.add("\n" + "mag:" + mag[0] + "," + mag[1] + "," + mag[2]);
                    tData.add("\n" + "gyr:" + gyr[0] + "," + gyr[1] + "," + gyr[2]);
                    tData.add("\n" + "gra:" + gra[0] + "," + gra[1] + "," + gra[2]);
                    tData.add("\n" + "l_acc:" + l_acc[0] + "," + l_acc[1] + "," + l_acc[2]);
//                    tData.add("press:" + pre);
                    tData.add("\n" + "orientation:" + ori);

                case REFRESH_MAP:
                    map.setImageBitmap(bitmapFromServer);
                    Log.d("MAP", "MAP refreshed");

            }
        }
    };

    @SuppressLint("HandlerLeak")
    Handler myHandler = new Handler() {
        public void handleMessage(Message msg) {
            switch (msg.what) {
                case STRAT_TRACK:
                    Toast.makeText(MainActivity.this,
                            "Start Tracking!",
                            Toast.LENGTH_SHORT).show();
                    new Thread(new Runnable() {
                        @Override
                        public void run() {
                            double[][] robots;
                            int countData = 0;
//                            String tracePath = path + "/trace";//test
//                            Matrix dataAll = Utils.readMatrix(tracePath + "/" + parking + pose + trace + ".csv");//test
//                            int dataPtr = 0;//test
                            while (run) { //&& dataPtr < dataAll.getRowDimension()

                                float[][] modelData = new float[9][500];
                                int modelCount = 0;

                                try {
                                    Thread.sleep(COLLECT_INTERVAL);
                                } catch (InterruptedException e) {
                                    e.printStackTrace();
                                }
                                try {
//                                    double[] data = {System.currentTimeMillis(),//real time
//                                            l_acc[0], l_acc[1], l_acc[2], ori,
//                                            gra[0], gra[1], gra[2],
//                                            gyr[0], gyr[1], gyr[2],
//                                            mag[0], mag[1], mag[2]};
//
//                                    robots = vetrackSystem.processData(data, sound);

                                    modelData[modelCount++] = new float[]{gra[0], gra[1], gra[2], gyr[0], gyr[1], gyr[2], l_acc[0], l_acc[1], l_acc[2]};
                                    if (modelCount % 4500 == 0) {
                                        modelCount = 0;
                                        float[] tansData = new float[4500];
                                        for (int i = 0; i < 4500; i++) {
                                            tansData[i] = modelData[i % 9][i / 9];
                                        }
                                        //tensorData.put(asByteBuffer(FloatBuffer.wrap(tansData)).array());
                                    }

                                    //测试用例
                                    float[] sampleData = new float[4500];
                                    Random r = new Random(1);
                                    for (int i = 0; i < sampleData.length; i++) {
                                        sampleData[i] = r.nextFloat() / 1000;
                                    }
                                    //tensorData.put(asByteBuffer(FloatBuffer.wrap(sampleData)).array());
//                                robots = vetrackSystem.processData(dataAll.getArray()[dataPtr++]);//test
//                                    if (countData % 20 == 0) {
//                                        resultBm = drawPoint.setPoints(robots[0], robots[1], robots[6]);
//                                        myHandler.sendEmptyMessage(DRAW_POINT);
//                                    }
//                                    countData++;
                                } catch (Exception e) {
                                    myHandler.sendEmptyMessage(ERROR);
                                }
                            }

                            //ByteBuffer output = aiboost.getOutputTensor(0); //输出
                            //byte[] result = new byte[output.remaining()];
                            //aiboost.runWithOutInputOutput();
                            //output.get(result, 0,  result.length);
//                            FloatBuffer buffer = ByteBuffer.wrap(result).asFloatBuffer();
//                            float[] res = new float[buffer.remaining()];
//                            buffer.get(res);    //得到0速度变化量，1角速度变化量


                            run = false;
                            vetrackSystem.stop();
                            runOnUiThread(new Runnable() {
                                @Override
                                public void run() {
                                    Toast.makeText(MainActivity.this,
                                            "Finish!",
                                            Toast.LENGTH_SHORT).show();
                                }
                            });
                        }
                    }).start();
                    break;
                case DRAW_POINT:
                    map.setImageBitmap(resultBm);
                    break;
                case ERROR:
                    run = false;
                    Toast.makeText(MainActivity.this,
                            "Something goes wrong and system terminate!",
                            Toast.LENGTH_LONG).show();
            }
        }
    };

}
