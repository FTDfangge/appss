package com.vetrack.vetrack.Service;

import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.graphics.ImageFormat;
import android.graphics.Rect;
import android.graphics.YuvImage;
import android.hardware.Camera;
import android.media.Image;
import android.util.Log;

import org.jetbrains.annotations.NotNull;
import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;

import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.net.URLEncoder;

import okhttp3.Call;
import okhttp3.Callback;
import okhttp3.FormBody;
import okhttp3.OkHttpClient;
import okhttp3.Request;
import okhttp3.RequestBody;
import okhttp3.Response;

public class Network {
    private static String SERVER_URL = "http://121.196.150.184:8080/";
    private static Bitmap bitmapFromServer;
    private static Network network = null;

    public int getPrivacyState() {
        return privacyState;
    }

    public void setPrivacyState(int privacyState) {
        this.privacyState = privacyState;
    }

    private int privacyState = 0;

    public Network(){
        privacyState = 0;

    }

    public String download(String command){

        String map = null;
        OkHttpClient okHttpClient = new OkHttpClient();

        Request request = new Request.Builder()
                .url("http://121.196.150.184:8080/getMap")
                .build();
        Response response = null;
        try {
            response = okHttpClient.newCall(request).execute();
            String responseData = response.body().string();
            JSONArray jsonArray = new JSONArray(responseData);
            JSONObject jsonObject = jsonArray.getJSONObject(0);
            map = jsonObject.getString("map");

//            map = jsonObject.getString("map");
            Log.d("MAAAAAAAAAP",map);

        } catch (IOException | JSONException e) {
            e.printStackTrace();
//            map= "";

        }


        return map;
    }

    public void upload(String fileName, String dataString) throws Exception {
        OkHttpClient okHttpClient = new OkHttpClient();

        RequestBody requestBody = new FormBody.Builder()
                .add("filename", fileName)
                .add("imuFile", dataString)
                .build();

        Request request = new Request.Builder()
                .url(SERVER_URL+"postIMU")
                .post(requestBody)
                .build();
        okHttpClient.newCall(request).enqueue(new Callback() {
            @Override
            public void onFailure(@NotNull Call call, @NotNull IOException e) {
                Log.e("net","FAILURE");
            }

            @Override
            public void onResponse(@NotNull Call call, @NotNull Response response) throws IOException {
                Log.d("net","SUCCESS");
            }
        });


    }

    /**
     * 把一个文件转化为字节
     *
     * @param file
     * @return byte[]
     * @throws Exception
     */
    public static byte[] getByte(File file) throws Exception {
        byte[] bytes = null;
        if (file != null) {
            InputStream is = new FileInputStream(file);
            int length = (int) file.length();
            if (length > Integer.MAX_VALUE)   //当文件的长度超过了int的最大值
            {
                System.out.println("this file is max ");
                return null;
            }
            bytes = new byte[length];
            int offset = 0;
            int numRead = 0;
            while (offset < bytes.length && (numRead = is.read(bytes, offset, bytes.length - offset)) >= 0) {
                offset += numRead;
            }
            //如果得到的字节长度和file实际的长度不一致就可能出错了
            if (offset < bytes.length) {
                System.out.println("file length is error");
                return null;
            }
            is.close();
        }
        return bytes;
    }

    public static Network getInstance(){
        if (network == null){
            network = new Network();
        }

        return network;
    }
}
